<?xml version="1.0" encoding="UTF-8"?>

<!-- Note to peole wondering what this file is:
Files called build.xml are scripts for a build tool called "ant" (google it).
The job of this file is to describe how the java program is compiled and stuffed into a jar file.

When you create a WPILib project the normal way, without using the Team1389 template, a build.xml is automatically created.
The job of the build.xml file is to compile the program, stuff it into a jar, and send it to the roboRIO.
However, in order to access the Team1389-Robot-Code-Base library, I had to modify this file.

To make sense of this file, you should probably look at an autogenerated wpilib build.xml, and then compare it to this one.
-->

<project name="FRC Deployment" default="deploy">

	<property file="${user.home}/wpilib/wpilib.properties" />
	<property file="base.properties" />
	<property file="build.properties" />
	<property file="${user.home}/wpilib/java/${version}/ant/build.properties" />

	<!-- This target makes sure that the correct location for Team1389-Robot-Code-Base is set up in the base.properties file
	If the project is found, this target will then run the build file in the base. -->
	<target name="test-for-base">
		<if>
			<available file="${team1389base.loc}/.marker.txt" />
			<then>
				<echo message="base found, running jar-as-lib target" />
				<ant dir="${team1389base.loc}" antfile="build.xml" inheritall="false" target="jar-as-lib"/>
				<echo message="done running base jar target" />
			</then>
			<else>
				<echo message="current location: ${team1389base.loc}" />
				<echo message="check base.properties" level="error" />
				<fail message="Team1389-Robot-Code-Base does not exist at specified location, check base.properties" />
			</else>
		</if>
	</target>
	
	<target name="jar-resource-dir">
		<echo>Jarring project specific resources to ${build.jars}</echo>
		<jar destfile="${project.resources.jar}">
			<fileset dir="${project.resources}"></fileset>

		</jar>
	</target>

	<import file="${wpilib.ant.dir}/build.xml" />

	<!-- Adds the test-for-base dependency onto the jar target so that the Base is included properly -->
	<target name="jar" depends="test-for-base,jar-resource-dir,compile">
		<echo>[athena-jar] Making jar ${dist.jar}.</echo>
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.jars}" />

		<echo>[athena-jar] Copying jars from ${classpath}:${userLibs} to ${build.jars}.</echo>
		<copy todir="${build.jars}" flatten="true">
			<path>
				<pathelement path="${classpath}:${userLibs}" />
			</path>
		</copy>

		<jar destfile="${dist.jar}" update="false">
			<manifest>
				<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase" />
				<attribute name="Robot-Class" value="${robot.class}" />
				<attribute name="Class-Path" value="." />
			</manifest>

			<fileset dir="${build.dir}" includes="**/*.class" />

			<zipgroupfileset dir="${build.jars}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>
	</target>

	<target name="jar-for-simulation" depends="test-for-base,jar-resource-dir,compile">
		<echo>[jar-for-simulation] Building jar.</echo>

		<jar destfile="${simulation.dist.jar}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Robot-Class" value="${robot.class}" />
				<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase" />
			</manifest>
			<fileset dir="${build.dir}" />
			<zipgroupfileset dir="${wpilib.sim.lib}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>
	</target>

</project>
